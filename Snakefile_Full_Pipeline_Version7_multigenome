""""Snakefile for controlling the copy number assessment pipeline"""

# this is where the config file lives
configfile: "config.yml"

import re
import os
import subprocess


uniq_kmers = config['UNIQUE']

if uniq_kmers[0] == "unique":
    output = expand("results/Copy_Numbers_{feature}_{id}_k{k}.tsv",feature=config["FEATURE"],k=config["K"],id=config["ID"])

if uniq_kmers[0] == "no_unique":
    output = expand("results/Copy_Numbers_nu_{feature}_{id}_k{k}.tsv",feature=config["FEATURE"],k=config["K"],id=config["ID"])

gzip_switch = config['GZIP']
if gzip_switch[0] == "True":
    gzip = True
else:
    gzip = False

thr = int(config['THREADS'][0])


# features = config["FEATURE"]
# paths1 = config["FPATH"]
# paths2 = config["BED"]
# for n in range(len(features)):
#     item = features[n]
#     path = paths1[n]
#     bed_path = paths2[n]
#     command = 'mkdir ' + 'feature/' + str(item)
#     p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True,universal_newlines=True)
#     command = 'scp '+ path +  ' feature/' + str(item) + "/"
#     p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True,universal_newlines=True)
#     command = 'scp '+ bed_path +  ' feature/' + str(item) + "/"
#     p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True,universal_newlines=True)


rule all:
    input:
        output

rule match_windows:
    input:
        target_bed = expand("feature/{feature}/{feature}.fa", feature=config["FEATURE"])
    params:
        feature=config["FEATURE"],
        fpath = config["FPATH"],
        fbed = config["BED"],
        genome=config["GENOME"],
        w_size=config["WINDOW_SIZE"]
    output:
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"])
    run:
        for n in range(len(params.feature)):
            feature = params.feature[n]
            path1 = params.fpath[n]
            if params.fbed[0] != "NA":
                path2 = params.fbed[n]
            genome = params.genome[n]
            shell("echo {genome} >> genomes_used.txt")
            w_size = params.w_size[0]
            #shell("mkdir feature/{feature}")
            #shell("scp {path1} feature/{feature}/{feature}.fa")
            #shell("scp {path2} feature/{feature}/{feature}.bed")
            if params.fbed[0] != "NA":
                shell("cut -f 1 {path2} | sort | uniq > target_chrms.txt")
                shell("python identify_gc_matched_regions_v2.py -roi feature/{feature}/{feature}.fa -rbed {path2} -assembly {genome} -chr target_chrms.txt -w_size {w_size}")
            else:
                shell("python identify_gc_matched_regions_v2.py -roi feature/{feature}/{feature}.fa -assembly {genome} -w_size {w_size}")
            shell("bedtools getfasta -fi {genome} -bed matched_windows_subset.bed -fo matched_windows_subset_{feature}.fa")
            shell("mv matched_windows_subset.bed matched_windows_subset_{feature}.bed")
            shell("mv matched_windows.bed matched_windows_{feature}.bed")
            shell("mv matched_windows*fa matched_windows/")
            shell("mv matched_windows*bed matched_windows/")

rule kmerize_features_uniq:
    input:
        target_fa = expand("{feature_input}", feature_input=config["FPATH"]),
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"])
    params:
        k = config["K"],
        feature=config["FEATURE"],
        genome=config["GENOME"]
    output:
        gcn = expand("feature/{feature}/{feature}_unique_{k}mers.fa",k=config["K"],feature=config["FEATURE"])
    threads: thr
    run:
        for n in range(len(params.feature)):
            feature = params.feature[n]
            gen = params.genome[n]
            shell("echo {gen} >> genomes_used.txt")
            basename = gen[:gen.rindex('.')]
            genname  = basename + ".genome"
            shell("samtools faidx {gen}")
            shell("cut -f 1,2 {gen}.fai > {genname}")
            shell("bedtools getfasta -fi {genome} -bed feature/{feature}/{feature}.bed -fo feature/{feature}/{feature}.fa")
            shell("bedtools sort -i feature/{feature}/{feature}.bed > feature/{feature}/{feature}_sorted.bed")
            shell("bedtools complement -i feature/{feature}/{feature}_sorted.bed -g {genname} > feature/{feature}/all_but_{feature}.bed")
            shell("bedtools getfasta -fi {genome} -bed feature/{feature}/all_but_{feature}.bed -fo feature/{feature}/all_but_{feature}.fa")
            print(genname)
            print(gen)
            for k in params.k:
                shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_nfcn_{k}mers.jf --if feature/{feature}/{feature}.fa feature/{feature}/all_but_{feature}.fa")
                shell("jellyfish dump -o {feature}_nfcn_{k}mers.fa {feature}_nfcn_{k}mers.jf")
                shell("grep -A1 -w '>0' {feature}_nfcn_{k}mers.fa > {feature}_unique_{k}mers.fa")
                shell("grep -v '\-' {feature}_unique_{k}mers.fa > {feature}_unique_{k}mers.fa1")
                shell("rm {feature}_unique_{k}mers.fa")
                shell("mv {feature}_unique_{k}mers.fa1 {feature}_unique_{k}mers.fa")
                shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_fcn_unique_{k}mers.jf --if {feature}_unique_{k}mers.fa feature/{feature}/{feature}.fa")
                shell("jellyfish dump -o {feature}_fcn_unique_{k}mers.fa {feature}_fcn_unique_{k}mers.jf")
                shell("mv {feature}*{k}mers.fa feature/{feature}/")
                shell("mv {feature}*{k}mers.jf jellyfish_files/")


rule kmerize_matched_windows_uniq:
    input:
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"])
    params:
        k = config["K"],
        feature=config["FEATURE"],
        genome=config["GENOME"]
    output:
        ngcn = expand("matched_windows/matched_windows_subset_fcn_{feature}_unique_{k}mers.fa",k=config["K"],feature=config["FEATURE"])
    threads: thr
    run:
        for n in range(len(params.feature)):
            feature = params.feature[n]
            gen = params.genome[n]
            shell("echo {gen} >> genomes_used.txt")
            basename = gen[:gen.rindex('.')]
            genname  = basename + ".genome"
            shell("samtools faidx {gen}")
            shell("cut -f 1,2 {gen}.fai > {genname}")
            shell("bedtools getfasta -fi {gen} -bed matched_windows/matched_windows_subset_{feature}.bed -fo matched_windows/matched_windows_subset_{feature}.fa")
            shell("bedtools sort -g {genname} -i matched_windows/matched_windows_subset_{feature}.bed > matched_windows/matched_windows_subset_{feature}_sorted.bed")
            shell("bedtools complement -i matched_windows/matched_windows_subset_{feature}_sorted.bed -g {genname} > matched_windows/all_but_matched_windows_subset_{feature}.bed")
            shell("bedtools getfasta -fi {gen} -bed matched_windows/all_but_matched_windows_subset_{feature}.bed -fo matched_windows/all_but_matched_windows_subset_{feature}.fa")
            for k in params.k:
                shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_windows_subset_{feature}_nfcn_{k}mers.jf --if matched_windows/matched_windows_subset_{feature}.fa matched_windows/all_but_matched_windows_subset_{feature}.fa")
                shell("jellyfish dump -o matched_windows_subset_{feature}_nfcn_{k}mers.fa matched_windows_subset_{feature}_nfcn_{k}mers.jf")
                shell("grep -A1 -w '>0' matched_windows_subset_{feature}_nfcn_{k}mers.fa > matched_windows_subset_{feature}_unique_{k}mers.fa")
                shell("grep -v '\-' matched_windows_subset_{feature}_unique_{k}mers.fa > matched_windows_subset_{feature}_unique_{k}mers.fa1")
                shell("rm matched_windows_subset_{feature}_unique_{k}mers.fa")
                shell("mv matched_windows_subset_{feature}_unique_{k}mers.fa1 matched_windows_subset_{feature}_unique_{k}mers.fa")
                shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_windows_subset_fcn_{feature}_unique_{k}mers.jf --if matched_windows_subset_{feature}_unique_{k}mers.fa matched_windows/matched_windows_subset_{feature}.fa")
                shell("jellyfish dump -o matched_windows_subset_fcn_{feature}_unique_{k}mers.fa matched_windows_subset_fcn_{feature}_unique_{k}mers.jf")
                shell("mv matched_windows_subset*{k}mers.fa matched_windows/")
                shell("mv matched_windows_subset*{k}mers.jf jellyfish_files/")

rule kmerize_non_uniq:
    input:
        target_fa = expand("feature/{feature}/{feature}.fa", feature=config["FEATURE"]),
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"])
    params:
        k = config["K"],
        feature=config["FEATURE"]
    output:
        gcn_non_uniq = expand("feature/{feature}/{feature}_k{k}_cn.fa",k=config["K"],feature=config["FEATURE"])
    threads: thr
    run:
        for feature in params.feature:
            for k in params.k:
                shell("jellyfish count -m {k} -s 100M -t {threads} -C -o feature/{feature}/{feature}_k{k}_cn.jf feature/{feature}/{feature}.fa")
                shell("jellyfish dump feature/{feature}/{feature}_k{k}_cn.jf > feature/{feature}/{feature}_k{k}_cn.fa")

rule cn_uniq:
    input:
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"]),
        gcn = expand("feature/{feature}/{feature}_unique_{k}mers.fa",k=config["K"],feature=config["FEATURE"]),
        ngcn = expand("matched_windows/matched_windows_subset_fcn_{feature}_unique_{k}mers.fa",k=config["K"],feature=config["FEATURE"])
    params:
        k = config["K"],
        feature=config["FEATURE"],
        seqdir=config["SEQ_DIR"],
        id = config["ID"]
    output:
        CN = expand("results/Copy_Numbers_{feature}_k{k}.tsv",feature=config["FEATURE"],k=config["K"],id=config["ID"])
    threads: thr
    run:
        seqdir = params.seqdir[0]
        for n in range(len(params.id)):
            feature = params.feature[n]
            id = params.id[n]
            for k in params.k:
                if gzip == True:
                    shell("zcat {seqdir}{id}_1.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_1.jf --if feature/{feature}/{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_2.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_2.jf --if feature/{feature}/{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_1.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_1.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_2.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_2.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_1.fa {feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_2.fa {feature}_{id}_k{k}_2.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_1.fa matched_gc_{feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_2.fa matched_gc_{feature}_{id}_k{k}_2.jf")

                if gzip == False:
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_1.jf --if feature/{feature}/{feature}_unique_{k}mers.fa {seqdir}{id}_1.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_2.jf --if feature/{feature}/{feature}_unique_{k}mers.fa {seqdir}{id}_2.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_1.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa {seqdir}{id}_1.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_2.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa {seqdir}{id}_2.fastq")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_1.fa {feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_2.fa {feature}_{id}_k{k}_2.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_1.fa matched_gc_{feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_2.fa matched_gc_{feature}_{id}_k{k}_2.jf")
                shell("python filter_matched_kmers_no_fid.py -fa matched_gc_{feature}_{id}_k{k}_1.fa -read 1 -k {k} -ID {id}")
                shell("python filter_matched_kmers_no_fid.py -fa matched_gc_{feature}_{id}_k{k}_2.fa -read 2 -k {k} -ID {id}")
                shell('mv matched_gc_{id}_k{k}_filtered_1.fa matched_gc_{feature}_{id}_k{k}_filtered_1.fa')
                shell('mv matched_gc_{id}_k{k}_filtered_2.fa matched_gc_{feature}_{id}_k{k}_filtered_2.fa')
                shell("mv matched_gc_*filtered* jellyfish_files/")
                shell("mv {feature}_{id}* jellyfish_files/")
                shell("mv matched_gc_{feature}_{id}* jellyfish_files/")
                shell("python Call_Copy_Number_GC_Normalization_Version7_Filtering.py -r1 jellyfish_files/{feature}_{id}_k{k}_1.fa -r2 jellyfish_files/{feature}_{id}_k{k}_2.fa -nc1 jellyfish_files/matched_gc_{feature}_{id}_k{k}_filtered_1.fa -nc2 jellyfish_files/matched_gc_{feature}_{id}_k{k}_filtered_2.fa -ngcn matched_windows/matched_windows_subset_fcn_{feature}_unique_{k}mers.fa -ID {feature} -gcn feature/{feature}/{feature}_fcn_unique_{k}mers.fa")
                shell("mv Copy_Numbers.tsv Copy_Numbers_{feature}_{id}_k{k}.tsv")
                shell("mv Copy_Numbers_{feature}_{id}_k{k}.tsv results/")

rule cn_non_uniq:
    input:
        gcn_non_uniq = expand("feature/{feature}/{feature}_k{k}_cn.fa",k=config["K"],feature=config["FEATURE"]),
        ngcn = expand("matched_windows/matched_windows_subset_fcn_{feature}_unique_{k}mers.fa",k=config["K"],feature=config["FEATURE"]),
        mwin = expand("matched_windows/matched_windows_subset_{feature}.fa", feature=config["FEATURE"])
    params:
        k = config["K"],
        feature=config["FEATURE"],
        seqdir=config["SEQ_DIR"],
        id = config["ID"]
    output:
        chm13_CN_non_uniq = expand("results/Copy_Numbers_nu_{feature}_{id}_k{k}.tsv",feature=config["FEATURE"],k=config["K"],id=config["ID"])
    threads: thr
    run:
        #add to the gzip argument later
        seqdir = params.seqdir[0]
        for n in range(len(params.id)):
            feature = params.feature[n]
            id = params.id[n]
            for k in params.k:
                if gzip == True:
                    shell("zcat {seqdir}{id}_1.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_1.jf --if feature/{feature}/{feature}.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_2.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_2.jf --if feature/{feature}/{feature}.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_1.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_1.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("zcat {seqdir}{id}_2.fastq.gz | jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_2.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa /dev/fd/0")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_1.fa {feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_2.fa {feature}_{id}_k{k}_2.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_1.fa matched_gc_{feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_2.fa matched_gc_{feature}_{id}_k{k}_2.jf")

                if gzip == False:
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_1.jf --if feature/{feature}/{feature}.fa {seqdir}{id}_1.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o {feature}_{id}_k{k}_2.jf --if feature/{feature}/{feature}.fa {seqdir}{id}_2.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_1.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa {seqdir}{id}_1.fastq")
                    shell("jellyfish count -m {k} -s 100M -C -t {threads} -o matched_gc_{feature}_{id}_k{k}_2.jf --if matched_windows/matched_windows_subset_{feature}_unique_{k}mers.fa {seqdir}{id}_2.fastq")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_1.fa {feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o {feature}_{id}_k{k}_2.fa {feature}_{id}_k{k}_2.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_1.fa matched_gc_{feature}_{id}_k{k}_1.jf")
                    shell("jellyfish dump -o matched_gc_{feature}_{id}_k{k}_2.fa matched_gc_{feature}_{id}_k{k}_2.jf")
                shell("python filter_matched_kmers_no_fid.py -fa matched_gc_{feature}_{id}_k{k}_1.fa -read 1 -k {k} -ID {id}")
                shell("python filter_matched_kmers_no_fid.py -fa matched_gc_{feature}_{id}_k{k}_2.fa -read 2 -k {k} -ID {id}")
                shell('mv matched_gc_{id}_k{k}_filtered_1.fa matched_gc_{feature}_{id}_k{k}_filtered_1.fa')
                shell('mv matched_gc_{id}_k{k}_filtered_2.fa matched_gc_{feature}_{id}_k{k}_filtered_2.fa')
                shell("mv matched_gc_*filtered* jellyfish_files/")
                shell("mv {feature}_{id}* jellyfish_files/")
                if "filtered" not in id:
                    shell("mv matched_gc_{feature}_{id}* jellyfish_files/")
                shell("python Call_Copy_Number_GC_Normalization_Version7_Filtering.py -r1 jellyfish_files/{feature}_{id}_k{k}_1.fa -r2 jellyfish_files/{feature}_{id}_k{k}_2.fa -nc1 jellyfish_files/matched_gc_{feature}_{id}_k{k}_filtered_1.fa -nc2 jellyfish_files/matched_gc_{feature}_{id}_k{k}_filtered_2.fa -ngcn matched_windows/matched_windows_subset_fcn_{feature}_unique_{k}mers.fa -ID {feature}_{id} -gcn feature/{feature}/{feature}_k{k}_cn.fa")
                shell("mv Copy_Numbers.tsv Copy_Numbers_nu_{feature}_{id}_k{k}.tsv")
                shell("mv Copy_Numbers_nu_{feature}_{id}_k{k}.tsv results/")
